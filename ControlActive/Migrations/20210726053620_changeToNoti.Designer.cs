// <auto-generated />
using System;
using ControlActive.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace ControlActive.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210726053620_changeToNoti")]
    partial class changeToNoti
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("ControlActive.Models.AssetEvaluation", b =>
                {
                    b.Property<int>("AssetEvaluationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("EvaluatingOrgName")
                        .HasColumnType("text");

                    b.Property<DateTime>("ExamReportDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ExamReportFileId")
                        .HasColumnType("integer");

                    b.Property<string>("ExamReportFileLink")
                        .HasColumnType("text");

                    b.Property<string>("ExamReportRegNumber")
                        .HasColumnType("text");

                    b.Property<string>("ExaminingOrgName")
                        .HasColumnType("text");

                    b.Property<float>("MarketValue")
                        .HasColumnType("real");

                    b.Property<int?>("RealEstateId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ReportDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ReportFileId")
                        .HasColumnType("integer");

                    b.Property<string>("ReportFileLink")
                        .HasColumnType("text");

                    b.Property<string>("ReportRegNumber")
                        .HasColumnType("text");

                    b.Property<bool>("ReportStatus")
                        .HasColumnType("boolean");

                    b.Property<int?>("ShareId")
                        .HasColumnType("integer");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.HasKey("AssetEvaluationId");

                    b.HasIndex("RealEstateId");

                    b.HasIndex("ShareId");

                    b.ToTable("AssetEvaluations");
                });

            modelBuilder.Entity("ControlActive.Models.District", b =>
                {
                    b.Property<int>("DistrictId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("DistrictName")
                        .HasColumnType("text");

                    b.Property<int>("RegionId")
                        .HasColumnType("integer");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.HasKey("DistrictId");

                    b.HasIndex("RegionId");

                    b.ToTable("Districts");
                });

            modelBuilder.Entity("ControlActive.Models.FileModel", b =>
                {
                    b.Property<int>("FileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("AssetEvaluationId")
                        .HasColumnType("integer");

                    b.Property<string>("BasePath")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Extension")
                        .HasColumnType("text");

                    b.Property<string>("FilePath")
                        .HasColumnType("text");

                    b.Property<string>("FileType")
                        .HasColumnType("text");

                    b.Property<int?>("InstallmentAssetId")
                        .HasColumnType("integer");

                    b.Property<int?>("InstallmentStep2Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("OneTimePaymentAssetId")
                        .HasColumnType("integer");

                    b.Property<int?>("OneTimePaymentStep2Id")
                        .HasColumnType("integer");

                    b.Property<int?>("OneTimePaymentStep3Id")
                        .HasColumnType("integer");

                    b.Property<int?>("RealEstateId")
                        .HasColumnType("integer");

                    b.Property<int?>("ReductionInAssetId")
                        .HasColumnType("integer");

                    b.Property<int?>("ShareId")
                        .HasColumnType("integer");

                    b.Property<string>("SystemPath")
                        .HasColumnType("text");

                    b.Property<int?>("TransferredAssetId")
                        .HasColumnType("integer");

                    b.Property<string>("UploadedById")
                        .HasColumnType("text");

                    b.HasKey("FileId");

                    b.HasIndex("AssetEvaluationId");

                    b.HasIndex("InstallmentAssetId");

                    b.HasIndex("InstallmentStep2Id")
                        .IsUnique();

                    b.HasIndex("OneTimePaymentAssetId")
                        .IsUnique();

                    b.HasIndex("OneTimePaymentStep2Id")
                        .IsUnique();

                    b.HasIndex("OneTimePaymentStep3Id")
                        .IsUnique();

                    b.HasIndex("RealEstateId");

                    b.HasIndex("ReductionInAssetId")
                        .IsUnique();

                    b.HasIndex("ShareId");

                    b.HasIndex("TransferredAssetId");

                    b.HasIndex("UploadedById");

                    b.ToTable("FileModels");
                });

            modelBuilder.Entity("ControlActive.Models.GoverningBody", b =>
                {
                    b.Property<int>("GoverningBodyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("GoverningBodyName")
                        .HasColumnType("text");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.HasKey("GoverningBodyId");

                    b.ToTable("GoverningBodies");
                });

            modelBuilder.Entity("ControlActive.Models.Infrastucture", b =>
                {
                    b.Property<int>("InfrastructureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("InfrastructureName")
                        .HasColumnType("text");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.HasKey("InfrastructureId");

                    b.ToTable("Infrastuctures");
                });

            modelBuilder.Entity("ControlActive.Models.InstallmentAsset", b =>
                {
                    b.Property<int>("InstallmentAssetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<float>("ActualInitPayment")
                        .HasColumnType("real");

                    b.Property<float>("ActualPayment")
                        .HasColumnType("real");

                    b.Property<DateTime>("AggreementDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("AggreementFileId")
                        .HasColumnType("integer");

                    b.Property<string>("AggreementFileLink")
                        .HasColumnType("text");

                    b.Property<string>("AggreementNumber")
                        .HasColumnType("text");

                    b.Property<float>("AmountOfAssetSold")
                        .HasColumnType("real");

                    b.Property<string>("AssetBuyerName")
                        .HasColumnType("text");

                    b.Property<DateTime>("BiddingDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("GoverningBodyName")
                        .HasColumnType("text");

                    b.Property<int?>("InstallmentStep2Id")
                        .HasColumnType("integer");

                    b.Property<int>("InstallmentTime")
                        .HasColumnType("integer");

                    b.Property<int>("PaymentPeriodType")
                        .HasColumnType("integer");

                    b.Property<int?>("RealEstateId")
                        .HasColumnType("integer");

                    b.Property<int?>("ShareId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("SolutionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("SolutionFileId")
                        .HasColumnType("integer");

                    b.Property<string>("SolutionFileLink")
                        .HasColumnType("text");

                    b.Property<string>("SolutionNumber")
                        .HasColumnType("text");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.HasKey("InstallmentAssetId");

                    b.HasIndex("InstallmentStep2Id")
                        .IsUnique();

                    b.HasIndex("RealEstateId");

                    b.HasIndex("ShareId");

                    b.ToTable("InstallmentAssets");
                });

            modelBuilder.Entity("ControlActive.Models.InstallmentStep2", b =>
                {
                    b.Property<int>("InstallmentStep2Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("ActAndAssetDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("ActAndAssetFileId")
                        .HasColumnType("integer");

                    b.Property<string>("ActAndAssetFileLink")
                        .HasColumnType("text");

                    b.Property<string>("ActAndAssetNumber")
                        .HasColumnType("text");

                    b.HasKey("InstallmentStep2Id");

                    b.ToTable("InstallmentStep2");
                });

            modelBuilder.Entity("ControlActive.Models.Noti", b =>
                {
                    b.Property<int>("NotiId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FromUserId")
                        .HasColumnType("text");

                    b.Property<string>("FromUserName")
                        .HasColumnType("text");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.Property<string>("NotiBody")
                        .HasColumnType("text");

                    b.Property<string>("NotiHeader")
                        .HasColumnType("text");

                    b.Property<string>("ToUserId")
                        .HasColumnType("text");

                    b.Property<string>("ToUserName")
                        .HasColumnType("text");

                    b.Property<string>("Url")
                        .HasColumnType("text");

                    b.HasKey("NotiId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("ControlActive.Models.OneTimePaymentAsset", b =>
                {
                    b.Property<int>("OneTimePaymentAssetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("BiddingDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("GoverningBodyName")
                        .HasColumnType("text");

                    b.Property<int?>("OneTimePaymentStep2Id")
                        .HasColumnType("integer");

                    b.Property<int?>("OneTimePaymentStep3Id")
                        .HasColumnType("integer");

                    b.Property<int?>("RealEstateId")
                        .HasColumnType("integer");

                    b.Property<int?>("ShareId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("SolutionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("SolutionFileId")
                        .HasColumnType("integer");

                    b.Property<string>("SolutionFileLink")
                        .HasColumnType("text");

                    b.Property<string>("SolutionNumber")
                        .HasColumnType("text");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.HasKey("OneTimePaymentAssetId");

                    b.HasIndex("OneTimePaymentStep2Id")
                        .IsUnique();

                    b.HasIndex("OneTimePaymentStep3Id")
                        .IsUnique();

                    b.HasIndex("RealEstateId");

                    b.HasIndex("ShareId");

                    b.ToTable("OneTimePaymentAssets");
                });

            modelBuilder.Entity("ControlActive.Models.OneTimePaymentStep2", b =>
                {
                    b.Property<int>("OneTimePaymentStep2Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("AggreementDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("AggreementFileId")
                        .HasColumnType("integer");

                    b.Property<string>("AggreementFileLink")
                        .HasColumnType("text");

                    b.Property<string>("AggreementNumber")
                        .HasColumnType("text");

                    b.Property<float>("AmountOfAssetSold")
                        .HasColumnType("real");

                    b.Property<float?>("AmountPayed")
                        .HasColumnType("real");

                    b.Property<string>("AssetBuyerName")
                        .HasColumnType("text");

                    b.Property<DateTime>("ChangeOnAmountPayedTime")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("OneTimePaymentStep2Id");

                    b.ToTable("OneTimePaymentStep2");
                });

            modelBuilder.Entity("ControlActive.Models.OneTimePaymentStep3", b =>
                {
                    b.Property<int>("OneTimePaymentStep3Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("ActAndAssetDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ActAndAssetFileId")
                        .HasColumnType("integer");

                    b.Property<string>("ActAndAssetFileLink")
                        .HasColumnType("text");

                    b.Property<string>("ActAndAssetNumber")
                        .HasColumnType("text");

                    b.HasKey("OneTimePaymentStep3Id");

                    b.ToTable("OneTimePaymentStep3");
                });

            modelBuilder.Entity("ControlActive.Models.Proposal", b =>
                {
                    b.Property<int>("ProposalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ProposalName")
                        .HasColumnType("text");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.HasKey("ProposalId");

                    b.ToTable("Proposals");
                });

            modelBuilder.Entity("ControlActive.Models.RealEstate", b =>
                {
                    b.Property<int>("RealEstateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Activity")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("text");

                    b.Property<bool>("AssetEvaluationOn")
                        .HasColumnType("boolean");

                    b.Property<string>("AssetHolderName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("BuildingArea")
                        .HasColumnType("real");

                    b.Property<int?>("CadastreFileId")
                        .HasColumnType("integer");

                    b.Property<string>("CadastreFileLink")
                        .HasColumnType("text");

                    b.Property<string>("CadastreNumber")
                        .IsRequired()
                        .HasMaxLength(28)
                        .HasColumnType("character varying(28)");

                    b.Property<DateTime>("CadastreRegDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<DateTime>("CommisioningDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("Date_Added")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DistrictId")
                        .HasColumnType("integer");

                    b.Property<float>("InitialCostOfObject")
                        .HasColumnType("real");

                    b.Property<bool>("InstallmentAssetOn")
                        .HasColumnType("boolean");

                    b.Property<int>("NumberOfEmployee")
                        .HasColumnType("integer");

                    b.Property<bool>("OneTimePaymentAssetOn")
                        .HasColumnType("boolean");

                    b.Property<float>("OtherExpensesForYear")
                        .HasColumnType("real");

                    b.Property<int>("PhotoOfObject1Id")
                        .HasColumnType("integer");

                    b.Property<int>("PhotoOfObject2Id")
                        .HasColumnType("integer");

                    b.Property<int>("PhotoOfObject3Id")
                        .HasColumnType("integer");

                    b.Property<string>("PhotoOfObjectLink1")
                        .HasColumnType("text");

                    b.Property<string>("PhotoOfObjectLink2")
                        .HasColumnType("text");

                    b.Property<string>("PhotoOfObjectLink3")
                        .HasColumnType("text");

                    b.Property<float>("ProductionArea")
                        .HasColumnType("real");

                    b.Property<float>("ProfitOrLossOfYear1")
                        .HasColumnType("real");

                    b.Property<float>("ProfitOrLossOfYear2")
                        .HasColumnType("real");

                    b.Property<float>("ProfitOrLossOfYear3")
                        .HasColumnType("real");

                    b.Property<int>("ProposalId")
                        .HasColumnType("integer");

                    b.Property<string>("RealEstateName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("ReductionInAssetOn")
                        .HasColumnType("boolean");

                    b.Property<int>("RegionId")
                        .HasColumnType("integer");

                    b.Property<float>("ResidualValueOfObject")
                        .HasColumnType("real");

                    b.Property<float>("ShareOfActivity")
                        .HasColumnType("real");

                    b.Property<bool>("SubmissionOnBiddingOn")
                        .HasColumnType("boolean");

                    b.Property<float>("TaxForYear")
                        .HasColumnType("real");

                    b.Property<int?>("TransferredAssetId")
                        .HasColumnType("integer");

                    b.Property<bool>("TransferredAssetOn")
                        .HasColumnType("boolean");

                    b.Property<float>("WageForYear")
                        .HasColumnType("real");

                    b.Property<float>("Wear")
                        .HasColumnType("real");

                    b.HasKey("RealEstateId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("ProposalId");

                    b.HasIndex("RegionId");

                    b.HasIndex("TransferredAssetId")
                        .IsUnique();

                    b.ToTable("RealEstates");
                });

            modelBuilder.Entity("ControlActive.Models.RealEstateInfrastructure", b =>
                {
                    b.Property<int>("RealEstateId")
                        .HasColumnType("integer");

                    b.Property<int>("InfrastuctureId")
                        .HasColumnType("integer");

                    b.HasKey("RealEstateId", "InfrastuctureId");

                    b.HasIndex("InfrastuctureId");

                    b.ToTable("RRealEstateInfrastructures");
                });

            modelBuilder.Entity("ControlActive.Models.RealEstateTechnicalCharcs", b =>
                {
                    b.Property<int>("RealEstateId")
                        .HasColumnType("integer");

                    b.Property<int>("TechnicalCharcId")
                        .HasColumnType("integer");

                    b.HasKey("RealEstateId", "TechnicalCharcId");

                    b.HasIndex("TechnicalCharcId");

                    b.ToTable("RealEstateTechnicalCharcs");
                });

            modelBuilder.Entity("ControlActive.Models.ReductionInAsset", b =>
                {
                    b.Property<int>("ReductionInAssetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<float>("Amount")
                        .HasColumnType("real");

                    b.Property<float>("AssetValueAfterDecline")
                        .HasColumnType("real");

                    b.Property<string>("GoverningBodyName")
                        .HasColumnType("text");

                    b.Property<int>("NumberOfSteps")
                        .HasColumnType("integer");

                    b.Property<float>("Percentage")
                        .HasColumnType("real");

                    b.Property<int?>("RealEstateId")
                        .HasColumnType("integer");

                    b.Property<int?>("ShareId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("SolutionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("SolutionFileId")
                        .HasColumnType("integer");

                    b.Property<string>("SolutionNumber")
                        .HasColumnType("text");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.HasKey("ReductionInAssetId");

                    b.HasIndex("RealEstateId");

                    b.HasIndex("ShareId");

                    b.ToTable("ReductionInAssets");
                });

            modelBuilder.Entity("ControlActive.Models.Region", b =>
                {
                    b.Property<int>("RegionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("RegionName")
                        .HasColumnType("text");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.HasKey("RegionId");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("ControlActive.Models.Share", b =>
                {
                    b.Property<int>("ShareId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Activities")
                        .HasColumnType("text");

                    b.Property<float>("ActivityShare")
                        .HasColumnType("real");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<int>("AdministrativeStaff")
                        .HasColumnType("integer");

                    b.Property<float>("AmountFromAuthCapital")
                        .HasColumnType("real");

                    b.Property<float>("AmountPayable")
                        .HasColumnType("real");

                    b.Property<float>("AmountReceivable")
                        .HasColumnType("real");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("text");

                    b.Property<bool>("AssetEvaluationOn")
                        .HasColumnType("boolean");

                    b.Property<float>("AuthorizedCapital")
                        .HasColumnType("real");

                    b.Property<float>("AverageMonthlySalary")
                        .HasColumnType("real");

                    b.Property<float>("BuildingsArea")
                        .HasColumnType("real");

                    b.Property<string>("BusinessEntityName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Comments")
                        .HasColumnType("text");

                    b.Property<int>("DistrictId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("FoundationYear")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("IdRegNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("InstallmentAssetOn")
                        .HasColumnType("boolean");

                    b.Property<int>("NumberOfShares")
                        .HasColumnType("integer");

                    b.Property<bool>("OneTimePaymentAssetOn")
                        .HasColumnType("boolean");

                    b.Property<int>("OrgCharterId")
                        .HasColumnType("integer");

                    b.Property<string>("OrgCharterLink")
                        .HasColumnType("text");

                    b.Property<float>("ParValueOfShares")
                        .HasColumnType("real");

                    b.Property<string>("ParentOrganization")
                        .HasColumnType("text");

                    b.Property<float>("ProductionArea")
                        .HasColumnType("real");

                    b.Property<int>("ProductionPersonal")
                        .HasColumnType("integer");

                    b.Property<float>("ProfitOrLossOfYear1")
                        .HasColumnType("real");

                    b.Property<float>("ProfitOrLossOfYear2")
                        .HasColumnType("real");

                    b.Property<float>("ProfitOrLossOfYear3")
                        .HasColumnType("real");

                    b.Property<bool>("ReductionInAssetOn")
                        .HasColumnType("boolean");

                    b.Property<int>("RegCertificateId")
                        .HasColumnType("integer");

                    b.Property<string>("RegCertificateLink")
                        .HasColumnType("text");

                    b.Property<int>("RegionId")
                        .HasColumnType("integer");

                    b.Property<string>("ShareHolderName")
                        .HasColumnType("text");

                    b.Property<DateTime>("StateRegistrationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("SubmissionOnBiddingOn")
                        .HasColumnType("boolean");

                    b.Property<int?>("TransferredAssetId")
                        .HasColumnType("integer");

                    b.Property<bool>("TransferredAssetOn")
                        .HasColumnType("boolean");

                    b.HasKey("ShareId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("RegionId");

                    b.HasIndex("TransferredAssetId")
                        .IsUnique();

                    b.ToTable("Shares");
                });

            modelBuilder.Entity("ControlActive.Models.SubmissionOnBidding", b =>
                {
                    b.Property<int>("SubmissionOnBiddingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<float>("ActiveValue")
                        .HasColumnType("real");

                    b.Property<int>("AmountOnBidding")
                        .HasColumnType("integer");

                    b.Property<DateTime>("BiddingExposureDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("BiddingHoldDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ExposureTime")
                        .HasColumnType("integer");

                    b.Property<int?>("RealEstateId")
                        .HasColumnType("integer");

                    b.Property<int?>("ShareId")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<string>("TradingPlatformName")
                        .HasColumnType("text");

                    b.HasKey("SubmissionOnBiddingId");

                    b.HasIndex("RealEstateId");

                    b.HasIndex("ShareId");

                    b.ToTable("SubmissionOnBiddings");
                });

            modelBuilder.Entity("ControlActive.Models.TechnicalCharc", b =>
                {
                    b.Property<int>("TechnicalCharcId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.Property<string>("TechnicalCharcName")
                        .HasColumnType("text");

                    b.HasKey("TechnicalCharcId");

                    b.ToTable("TechnicalCharcs");
                });

            modelBuilder.Entity("ControlActive.Models.TransferForm", b =>
                {
                    b.Property<int>("TransferFormId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.Property<string>("TransferFormName")
                        .HasColumnType("text");

                    b.HasKey("TransferFormId");

                    b.ToTable("TransferForms");
                });

            modelBuilder.Entity("ControlActive.Models.TransferredAsset", b =>
                {
                    b.Property<int>("AssetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("ActAndAssetDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ActAndAssetFileId")
                        .HasColumnType("integer");

                    b.Property<string>("ActAndAssetFileLink")
                        .HasColumnType("text");

                    b.Property<string>("ActAndAssetNumber")
                        .HasColumnType("text");

                    b.Property<string>("AggreementFileLink")
                        .HasColumnType("text");

                    b.Property<DateTime>("AgreementDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("AgreementFileId")
                        .HasColumnType("integer");

                    b.Property<string>("AgreementNumber")
                        .HasColumnType("text");

                    b.Property<string>("OrgName")
                        .HasColumnType("text");

                    b.Property<string>("OrgNameOfAsset")
                        .HasColumnType("text");

                    b.Property<DateTime>("SolutionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("SolutionFileId")
                        .HasColumnType("integer");

                    b.Property<string>("SolutionFileLink")
                        .HasColumnType("text");

                    b.Property<string>("SolutionNumber")
                        .HasColumnType("text");

                    b.Property<float>("TotalCost")
                        .HasColumnType("real");

                    b.Property<int>("TransferFormId")
                        .HasColumnType("integer");

                    b.HasKey("AssetId");

                    b.HasIndex("TransferFormId");

                    b.ToTable("TransferredAssets");
                });

            modelBuilder.Entity("InfrastuctureRealEstate", b =>
                {
                    b.Property<int>("InfrastructuresInfrastructureId")
                        .HasColumnType("integer");

                    b.Property<int>("RealEstatesRealEstateId")
                        .HasColumnType("integer");

                    b.HasKey("InfrastructuresInfrastructureId", "RealEstatesRealEstateId");

                    b.HasIndex("RealEstatesRealEstateId");

                    b.ToTable("InfrastuctureRealEstate");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("RealEstateTechnicalCharc", b =>
                {
                    b.Property<int>("RealEstateId")
                        .HasColumnType("integer");

                    b.Property<int>("TechnicalCharsTechnicalCharcId")
                        .HasColumnType("integer");

                    b.HasKey("RealEstateId", "TechnicalCharsTechnicalCharcId");

                    b.HasIndex("TechnicalCharsTechnicalCharcId");

                    b.ToTable("RealEstateTechnicalCharc");
                });

            modelBuilder.Entity("ControlActive.Models.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("MiddleName")
                        .HasColumnType("text");

                    b.Property<string>("Postion")
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("ApplicationUser");
                });

            modelBuilder.Entity("ControlActive.Models.AssetEvaluation", b =>
                {
                    b.HasOne("ControlActive.Models.RealEstate", "RealEstate")
                        .WithMany("AssetEvaluations")
                        .HasForeignKey("RealEstateId");

                    b.HasOne("ControlActive.Models.Share", "Share")
                        .WithMany("AssetEvaluations")
                        .HasForeignKey("ShareId");

                    b.Navigation("RealEstate");

                    b.Navigation("Share");
                });

            modelBuilder.Entity("ControlActive.Models.District", b =>
                {
                    b.HasOne("ControlActive.Models.Region", "Region")
                        .WithMany("Districts")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Region");
                });

            modelBuilder.Entity("ControlActive.Models.FileModel", b =>
                {
                    b.HasOne("ControlActive.Models.AssetEvaluation", "AssetEvaluation")
                        .WithMany("Files")
                        .HasForeignKey("AssetEvaluationId");

                    b.HasOne("ControlActive.Models.InstallmentAsset", "InstallmentAsset")
                        .WithMany("Files")
                        .HasForeignKey("InstallmentAssetId");

                    b.HasOne("ControlActive.Models.InstallmentStep2", "InstallmentStep2")
                        .WithOne("FileModel")
                        .HasForeignKey("ControlActive.Models.FileModel", "InstallmentStep2Id");

                    b.HasOne("ControlActive.Models.OneTimePaymentAsset", "OneTimePaymentAsset")
                        .WithOne("FileModel")
                        .HasForeignKey("ControlActive.Models.FileModel", "OneTimePaymentAssetId");

                    b.HasOne("ControlActive.Models.OneTimePaymentStep2", "OneTimePaymentStep2")
                        .WithOne("FileModel")
                        .HasForeignKey("ControlActive.Models.FileModel", "OneTimePaymentStep2Id");

                    b.HasOne("ControlActive.Models.OneTimePaymentStep3", "OneTimePaymentStep3")
                        .WithOne("FileModel")
                        .HasForeignKey("ControlActive.Models.FileModel", "OneTimePaymentStep3Id");

                    b.HasOne("ControlActive.Models.RealEstate", "RealEstate")
                        .WithMany("Files")
                        .HasForeignKey("RealEstateId");

                    b.HasOne("ControlActive.Models.ReductionInAsset", "ReductionInAsset")
                        .WithOne("SolutionFile")
                        .HasForeignKey("ControlActive.Models.FileModel", "ReductionInAssetId");

                    b.HasOne("ControlActive.Models.Share", "Share")
                        .WithMany("Files")
                        .HasForeignKey("ShareId");

                    b.HasOne("ControlActive.Models.TransferredAsset", "TransferredAsset")
                        .WithMany("Files")
                        .HasForeignKey("TransferredAssetId");

                    b.HasOne("ControlActive.Models.ApplicationUser", "Uploadedby")
                        .WithMany("Files")
                        .HasForeignKey("UploadedById");

                    b.Navigation("AssetEvaluation");

                    b.Navigation("InstallmentAsset");

                    b.Navigation("InstallmentStep2");

                    b.Navigation("OneTimePaymentAsset");

                    b.Navigation("OneTimePaymentStep2");

                    b.Navigation("OneTimePaymentStep3");

                    b.Navigation("RealEstate");

                    b.Navigation("ReductionInAsset");

                    b.Navigation("Share");

                    b.Navigation("TransferredAsset");

                    b.Navigation("Uploadedby");
                });

            modelBuilder.Entity("ControlActive.Models.InstallmentAsset", b =>
                {
                    b.HasOne("ControlActive.Models.InstallmentStep2", "Step2")
                        .WithOne("InstallmentAsset")
                        .HasForeignKey("ControlActive.Models.InstallmentAsset", "InstallmentStep2Id");

                    b.HasOne("ControlActive.Models.RealEstate", "RealEstate")
                        .WithMany("InstallmentAssets")
                        .HasForeignKey("RealEstateId");

                    b.HasOne("ControlActive.Models.Share", "Share")
                        .WithMany("InstallmentAssets")
                        .HasForeignKey("ShareId");

                    b.Navigation("RealEstate");

                    b.Navigation("Share");

                    b.Navigation("Step2");
                });

            modelBuilder.Entity("ControlActive.Models.OneTimePaymentAsset", b =>
                {
                    b.HasOne("ControlActive.Models.OneTimePaymentStep2", "Step2")
                        .WithOne("OneTimePaymentAsset")
                        .HasForeignKey("ControlActive.Models.OneTimePaymentAsset", "OneTimePaymentStep2Id");

                    b.HasOne("ControlActive.Models.OneTimePaymentStep3", "Step3")
                        .WithOne("OneTimePaymentAsset")
                        .HasForeignKey("ControlActive.Models.OneTimePaymentAsset", "OneTimePaymentStep3Id");

                    b.HasOne("ControlActive.Models.RealEstate", "RealEstate")
                        .WithMany("OneTimePaymentAssets")
                        .HasForeignKey("RealEstateId");

                    b.HasOne("ControlActive.Models.Share", "Share")
                        .WithMany("OneTimePaymentAssets")
                        .HasForeignKey("ShareId");

                    b.Navigation("RealEstate");

                    b.Navigation("Share");

                    b.Navigation("Step2");

                    b.Navigation("Step3");
                });

            modelBuilder.Entity("ControlActive.Models.RealEstate", b =>
                {
                    b.HasOne("ControlActive.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("RealEstates")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("ControlActive.Models.District", "DistrictOfObject")
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ControlActive.Models.Proposal", "Proposal")
                        .WithMany("realEstates")
                        .HasForeignKey("ProposalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ControlActive.Models.Region", "RegionOfObject")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ControlActive.Models.TransferredAsset", "TransferredAsset")
                        .WithOne("RealEstate")
                        .HasForeignKey("ControlActive.Models.RealEstate", "TransferredAssetId");

                    b.Navigation("ApplicationUser");

                    b.Navigation("DistrictOfObject");

                    b.Navigation("Proposal");

                    b.Navigation("RegionOfObject");

                    b.Navigation("TransferredAsset");
                });

            modelBuilder.Entity("ControlActive.Models.RealEstateInfrastructure", b =>
                {
                    b.HasOne("ControlActive.Models.Infrastucture", "Infrastucture")
                        .WithMany()
                        .HasForeignKey("InfrastuctureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ControlActive.Models.RealEstate", "RealEstate")
                        .WithMany()
                        .HasForeignKey("RealEstateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Infrastucture");

                    b.Navigation("RealEstate");
                });

            modelBuilder.Entity("ControlActive.Models.RealEstateTechnicalCharcs", b =>
                {
                    b.HasOne("ControlActive.Models.RealEstate", "RealEstate")
                        .WithMany()
                        .HasForeignKey("RealEstateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ControlActive.Models.TechnicalCharc", "TechnicalCharc")
                        .WithMany()
                        .HasForeignKey("TechnicalCharcId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RealEstate");

                    b.Navigation("TechnicalCharc");
                });

            modelBuilder.Entity("ControlActive.Models.ReductionInAsset", b =>
                {
                    b.HasOne("ControlActive.Models.RealEstate", "RealEstate")
                        .WithMany("ReductionInAssets")
                        .HasForeignKey("RealEstateId");

                    b.HasOne("ControlActive.Models.Share", "Share")
                        .WithMany("ReductionInAssets")
                        .HasForeignKey("ShareId");

                    b.Navigation("RealEstate");

                    b.Navigation("Share");
                });

            modelBuilder.Entity("ControlActive.Models.Share", b =>
                {
                    b.HasOne("ControlActive.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("Shares")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("ControlActive.Models.District", "DistrictOfObject")
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ControlActive.Models.Region", "RegionOfObject")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ControlActive.Models.TransferredAsset", "TransferredAsset")
                        .WithOne("Share")
                        .HasForeignKey("ControlActive.Models.Share", "TransferredAssetId");

                    b.Navigation("ApplicationUser");

                    b.Navigation("DistrictOfObject");

                    b.Navigation("RegionOfObject");

                    b.Navigation("TransferredAsset");
                });

            modelBuilder.Entity("ControlActive.Models.SubmissionOnBidding", b =>
                {
                    b.HasOne("ControlActive.Models.RealEstate", "RealEstate")
                        .WithMany("SubmissionOnBiddings")
                        .HasForeignKey("RealEstateId");

                    b.HasOne("ControlActive.Models.Share", "Share")
                        .WithMany("SubmissionOnBiddings")
                        .HasForeignKey("ShareId");

                    b.Navigation("RealEstate");

                    b.Navigation("Share");
                });

            modelBuilder.Entity("ControlActive.Models.TransferredAsset", b =>
                {
                    b.HasOne("ControlActive.Models.TransferForm", "TransferForm")
                        .WithMany("TransferredAssets")
                        .HasForeignKey("TransferFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TransferForm");
                });

            modelBuilder.Entity("InfrastuctureRealEstate", b =>
                {
                    b.HasOne("ControlActive.Models.Infrastucture", null)
                        .WithMany()
                        .HasForeignKey("InfrastructuresInfrastructureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ControlActive.Models.RealEstate", null)
                        .WithMany()
                        .HasForeignKey("RealEstatesRealEstateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RealEstateTechnicalCharc", b =>
                {
                    b.HasOne("ControlActive.Models.RealEstate", null)
                        .WithMany()
                        .HasForeignKey("RealEstateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ControlActive.Models.TechnicalCharc", null)
                        .WithMany()
                        .HasForeignKey("TechnicalCharsTechnicalCharcId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ControlActive.Models.AssetEvaluation", b =>
                {
                    b.Navigation("Files");
                });

            modelBuilder.Entity("ControlActive.Models.InstallmentAsset", b =>
                {
                    b.Navigation("Files");
                });

            modelBuilder.Entity("ControlActive.Models.InstallmentStep2", b =>
                {
                    b.Navigation("FileModel");

                    b.Navigation("InstallmentAsset");
                });

            modelBuilder.Entity("ControlActive.Models.OneTimePaymentAsset", b =>
                {
                    b.Navigation("FileModel");
                });

            modelBuilder.Entity("ControlActive.Models.OneTimePaymentStep2", b =>
                {
                    b.Navigation("FileModel");

                    b.Navigation("OneTimePaymentAsset");
                });

            modelBuilder.Entity("ControlActive.Models.OneTimePaymentStep3", b =>
                {
                    b.Navigation("FileModel");

                    b.Navigation("OneTimePaymentAsset");
                });

            modelBuilder.Entity("ControlActive.Models.Proposal", b =>
                {
                    b.Navigation("realEstates");
                });

            modelBuilder.Entity("ControlActive.Models.RealEstate", b =>
                {
                    b.Navigation("AssetEvaluations");

                    b.Navigation("Files");

                    b.Navigation("InstallmentAssets");

                    b.Navigation("OneTimePaymentAssets");

                    b.Navigation("ReductionInAssets");

                    b.Navigation("SubmissionOnBiddings");
                });

            modelBuilder.Entity("ControlActive.Models.ReductionInAsset", b =>
                {
                    b.Navigation("SolutionFile");
                });

            modelBuilder.Entity("ControlActive.Models.Region", b =>
                {
                    b.Navigation("Districts");
                });

            modelBuilder.Entity("ControlActive.Models.Share", b =>
                {
                    b.Navigation("AssetEvaluations");

                    b.Navigation("Files");

                    b.Navigation("InstallmentAssets");

                    b.Navigation("OneTimePaymentAssets");

                    b.Navigation("ReductionInAssets");

                    b.Navigation("SubmissionOnBiddings");
                });

            modelBuilder.Entity("ControlActive.Models.TransferForm", b =>
                {
                    b.Navigation("TransferredAssets");
                });

            modelBuilder.Entity("ControlActive.Models.TransferredAsset", b =>
                {
                    b.Navigation("Files");

                    b.Navigation("RealEstate");

                    b.Navigation("Share");
                });

            modelBuilder.Entity("ControlActive.Models.ApplicationUser", b =>
                {
                    b.Navigation("Files");

                    b.Navigation("RealEstates");

                    b.Navigation("Shares");
                });
#pragma warning restore 612, 618
        }
    }
}
